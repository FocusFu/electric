C51 COMPILER V9.54   ULTRASONIC                                                            07/11/2017 13:48:05 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE ULTRASONIC
OBJECT MODULE PLACED IN UltraSonic.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE UltraSonic.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /**********************************包含头文件**********************************/
   2          #include <reg52.h>
   3          #include "1602.h"
   4          #include<intrins.h> 
   5          /************************************宏定义************************************/
   6          #define uchar unsigned char
   7          #define uint unsigned int
   8          #define VELOCITY_30C  3495       //30摄氏度时的声速，声速V= 331.5 + 0.6*温度； 
   9          //#define VELOCITY_23C  3453       //23摄氏度时的声速，声速V= 331.5 + 0.6*温度； 
  10          /************************************位定义************************************/
  11          sbit INPUT  = P3^2;                //回声接收端口
  12          sbit OUTPUT = P3^6;                  //超声触发端口
  13          sbit Beep   = P2^3;                // 蜂鸣器
  14          sbit DS     = P2^2;                //define interface
  15          sbit E=P2^5;            //使能信号位，将E位定义为P2.5引脚
  16          sbit BF=P0^7;           //忙碌标志位，，将BF位定义为P0.7引脚
  17          /********************************定义变量和数组********************************/
  18          long int distance=0;               //距离变量
  19          uchar table[]="   Designed by  "; 
  20          uchar table0[]="WeiLu & YuYaojia";
  21          uchar table1[]="There's no echo.";
  22          uchar table3[]="Distance:";
  23          unsigned char code digit[10]={"0123456789"};     //定义字符数组显示数字
  24          unsigned char code Str[]={"Test by DS18B20"};    //说明显示的是温度
  25          unsigned char code Error[]={"Error!Check!"};     //说明没有检测到DS18B20
  26          unsigned char code Temp[]={"T:"};             //说明显示的是温度
  27          unsigned char code V[]={"V:"};              //温度单位
  28          uchar count;
  29          /***********************************函数声明***********************************/
  30          extern void initLCD();//初始化LCD
  31          extern void write_date(uchar date);
  32          extern void write_com(uchar com);
  33          extern void delay(uint x);
  34          long int VELOCITY = 3453;       //摄氏度时的声速，声速V= 331.5 + 0.6*温度；
  35          int fdebug;
  36          /******************************************************************************/
  37          /* 函数名称  : Delay_xMs                                                      */
  38          /* 函数描述  : 延时函数                                                       */
  39          /* 输入参数  : x                                                              */
  40          /* 参数描述  : 延时时间                                                       */
  41          /* 返回值    : 无                                                             */
  42          /******************************************************************************/
  43          void Delay_xMs(unsigned int x)
  44          {
  45   1        unsigned int i,j;
  46   1        for(i = 0;i < x;i++ )
  47   1        {
  48   2          for(j = 0;j < 3;j++ )
  49   2          {
  50   3               ;
  51   3          }
  52   2        }
  53   1      }
  54          /******************************************************************************/
  55          /* 函数名称  : Alarm                                                          */
C51 COMPILER V9.54   ULTRASONIC                                                            07/11/2017 13:48:05 PAGE 2   

  56          /* 函数描述  : 蜂鸣器发声函数                                                 */
  57          /* 输入参数  : t                                                              */
  58          /* 参数描述  : 发声的频率                                                     */
  59          /* 返回值    : 无                                                             */
  60          /******************************************************************************/
  61          void Alarm(uchar t)
  62          {
  63   1        uchar i;
  64   1        for(i = 0;i < t;i++)
  65   1        {
  66   2          Beep = 0;
  67   2          Delay_xMs(1000/t);
  68   2          Beep = 1;
  69   2          Delay_xMs(1000/t);
  70   2        }
  71   1      } 
  72          /******************************************************************************/
  73          /* 函数名称  : delayt                                                         */
  74          /* 函数描述  : 延时函数                                                       */
  75          /* 输入参数  : x                                                              */
  76          /* 参数描述  : 延时时间数据                                                   */
  77          /* 返回值    : 无                                                             */
  78          /******************************************************************************/  
  79          void delayt(uint x)
  80          {
  81   1        uchar j;
  82   1        while(x-- > 0)
  83   1          {
  84   2            for(j = 0;j < 125;j++)
  85   2            {
  86   3                  ;
  87   3            }
  88   2          }
  89   1      }
  90          /******************************************************************************/
  91          /* 函数名称  : Init_MCU                                                       */
  92          /* 函数描述  : 初始化单片机函数                                               */
  93          /* 输入参数  : 无                                                             */
  94          /* 参数描述  : 无                                                             */
  95          /* 返回值    : 无                                                             */
  96          /******************************************************************************/
  97          void Init_MCU(void)
  98          {
  99   1        TMOD = 0x01;    //定时器2初始化,设置为16位自动重装模式
 100   1        TL0 = 0x66;
 101   1        TH0 = 0xfc;     //1ms
 102   1        ET0 = 1;        //开定时器2
 103   1        EA = 1;         //总中断使能
 104   1      }
 105          /******************************************************************************/
 106          /* 函数名称  : Init_Parameter                                                 */
 107          /* 函数描述  : 初始化参数和IO口函数                                           */
 108          /* 输入参数  : 无                                                             */
 109          /* 参数描述  : 无                                                             */
 110          /* 返回值    : 无                                                             */
 111          /******************************************************************************/
 112          void Init_Parameter(void)
 113          {
 114   1         OUTPUT =0;//超声输出关闭
 115   1         INPUT = 1;//超声输入关闭
 116   1         count = 0;
 117   1         distance = 0;
C51 COMPILER V9.54   ULTRASONIC                                                            07/11/2017 13:48:05 PAGE 3   

 118   1      }
 119          /******************************************************************************/
 120          /* 函数名称  : display_char                                                   */
 121          /* 函数描述  : 显示字符串函数                                                 */
 122          /* 输入参数  : point,address                                                  */
 123          /* 参数描述  : 写入的字符串的地址指针 1602显示对应的地址                      */
 124          /* 返回值    : 无                                                             */
 125          /******************************************************************************/
 126          void display_char(uchar *point,uchar address)
 127          {
 128   1        uchar i;
 129   1        write_com(0x80 + address);
 130   1        for(i = 0;i < 16; i++)
 131   1        {
 132   2          write_date(*point);
 133   2          point++;
 134   2        }
 135   1      }
 136          /******************************************************************************/
 137          /* 函数名称  : display                                                        */
 138          /* 函数描述  : 显示数字                                                       */
 139          /* 输入参数  : number，address                                                */
 140          /* 参数描述  : number写入的数据，address地址                                  */
 141          /* 返回值    : 无                                                             */
 142          /******************************************************************************/  
 143          void display(int number,uchar address)
 144          {
 145   1        uchar b,c,d,e;
 146   1        b= (number / 1000);
 147   1        c= (number / 100) % 10;
 148   1        d = (number / 10) % 10;
 149   1        e = number % 10;
 150   1        write_com(0x80 + address);
 151   1        write_date(b + 48);
 152   1        write_date(c + 48);
 153   1        write_date(d + 48);
 154   1        write_date(46);           //小数点的ASCII
 155   1        write_date(e + 48);
 156   1        write_date(99);           //"c"的ASCII
 157   1        write_date(109);          //"m"的ASCII
 158   1      }
 159          void displayv(int number,uchar address)
 160          {
 161   1        uchar b,c,d,e;
 162   1        b= (number / 1000);
 163   1        c= (number / 100) % 10;
 164   1        d = (number / 10) % 10;
 165   1        e = number % 10;
 166   1        write_com(0x80 + address);
 167   1        write_date(b + 48);
 168   1        write_date(c + 48);
 169   1        write_date(d + 48);
 170   1        write_date(46);           //小数点的ASCII
 171   1        write_date(e + 48);
 172   1        write_date(109);          //"m"的ASCII
 173   1      }
 174          /******************************************************************************/
 175          /* 函数名称  : Trig_SuperSonic                                                */
 176          /* 函数描述  : 发出声波函数                                                   */
 177          /* 输入参数  : i                                                              */
 178          /* 参数描述  : 发出的脉冲次数                                                 */
 179          /* 返回值    : 无                                                             */
C51 COMPILER V9.54   ULTRASONIC                                                            07/11/2017 13:48:05 PAGE 4   

 180          /******************************************************************************/
 181          void Trig_SuperSonic()//出发声波40kHz
 182          {
 183   1        ////////////////////////////////////////////////////////////////////////////////////////////
 184   1          OUTPUT = 1;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 185   1          OUTPUT = 0;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 186   1          OUTPUT = 1;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 187   1          OUTPUT = 0;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 188   1          OUTPUT = 1;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 189   1          OUTPUT = 0;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 190   1          OUTPUT = 1;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 191   1          OUTPUT = 0;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 192   1          OUTPUT = 1;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 193   1          OUTPUT = 0;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 194   1          OUTPUT = 1;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 195   1          OUTPUT = 0;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 196   1      //    OUTPUT = 1;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 197   1      //    OUTPUT = 0;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 198   1      //    OUTPUT = 1;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 199   1      //    OUTPUT = 0;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 200   1      //    OUTPUT = 1;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 201   1      //    OUTPUT = 0;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 202   1      //    OUTPUT = 1;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 203   1      //    OUTPUT = 0;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 204   1      //    OUTPUT = 1;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 205   1      //    OUTPUT = 0;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 206   1      //    OUTPUT = 1;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 207   1      //    OUTPUT = 0;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 208   1      //    OUTPUT = 1;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 209   1      //    OUTPUT = 0;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 210   1      //    OUTPUT = 1;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 211   1      //    OUTPUT = 0;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 212   1      //    OUTPUT = 1;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 213   1      //    OUTPUT = 0;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 214   1      //    OUTPUT = 1;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 215   1      //    OUTPUT = 0;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 216   1      //    /////////////////////////////////////////////////////////////
 217   1      }
 218          /******************************************************************************/
 219          /* 函数名称  : Measure_Distance                                               */
 220          /* 函数描述  : 计算距离函数                                                   */
 221          /* 输入参数  : 无                                                             */
 222          /* 参数描述  : 无                                                             */
 223          /* 返回值    : 0是超时没收到，1是收到了                                       */
 224          /******************************************************************************/
 225          int Measure_Distance(void)
 226          {
 227   1        uchar l;
 228   1        int ii;
 229   1        uint h,y;
 230   1        ii=1;
 231   1        while(INPUT)
 232   1        {
 233   2          if(count ==17)
 234   2          {
 235   3            ii = 0;
 236   3            break;
 237   3          }
 238   2        }
 239   1        TR0 = 0;
 240   1        l = TL0;
 241   1        h = TH0;
C51 COMPILER V9.54   ULTRASONIC                                                            07/11/2017 13:48:05 PAGE 5   

 242   1        y = (h << 8) + l;
 243   1        y = y - 0xfc66;//us部分
 244   1        distance = y + 1000 * count;//计算总时间
 245   1        TL0 = 0x66;
 246   1        TH0 = 0xfc;
 247   1        delayt(30);
 248   1        distance = VELOCITY * distance / 20000;
 249   1        return ii;
 250   1      }
 251          /*****************************************************
 252          函数功能：判断液晶模块的忙碌状态
 253          返回值：result。result=1，忙碌;result=0，不忙
 254          ***************************************************/
 255          bit BusyTest(void)
 256          {
 257   1        bit result;
 258   1        RS=0;       //根据规定，RS为低电平，RW为高电平时，可以读状态
 259   1        RW=1;
 260   1        E=1;        //E=1，才允许读写
 261   1        _nop_();   //空操作
 262   1        _nop_();
 263   1        _nop_(); 
 264   1        _nop_();   //空操作四个机器周期，给硬件反应时间 
 265   1        result=BF;  //将忙碌标志电平赋给result
 266   1        E=0;         //将E恢复低电平
 267   1        return result;
 268   1      }
 269          /*****************************************************
 270          函数功能：将模式设置指令或显示地址写入液晶模块
 271          入口参数：dictate
 272          ***************************************************/
 273          void WriteInstruction (unsigned char dictate)
 274          {
 275   1        while(BusyTest()==1);   //如果忙就等待
 276   1        RS=0;                  //根据规定，RS和R/W同时为低电平时，可以写入指令
 277   1        RW=0;   
 278   1        E=0;                   //E置低电平(根据表8-6，写指令时，E为高脉冲，
 279   1                                 // 就是让E从0到1发生正跳变，所以应先置"0"
 280   1        _nop_();
 281   1        _nop_();               //空操作两个机器周期，给硬件反应时间
 282   1        P0=dictate;            //将数据送入P0口，即写入指令或地址
 283   1        _nop_();
 284   1        _nop_();
 285   1        _nop_();
 286   1        _nop_();               //空操作四个机器周期，给硬件反应时间
 287   1        E=1;                   //E置高电平
 288   1        _nop_();
 289   1        _nop_();
 290   1        _nop_();
 291   1        _nop_();               //空操作四个机器周期，给硬件反应时间
 292   1        E=0;                  //当E由高电平跳变成低电平时，液晶模块开始执行命令
 293   1       }
 294          /*****************************************************
 295          函数功能：指定字符显示的实际地址
 296          入口参数：x
 297          ***************************************************/
 298          void WriteAddress(unsigned char x)
 299          {
 300   1        WriteInstruction(x|0x80); //显示位置的确定方法规定为"80H+地址码x"
 301   1      }
 302          /*****************************************************
 303          函数功能：将数据(字符的标准ASCII码)写入液晶模块
C51 COMPILER V9.54   ULTRASONIC                                                            07/11/2017 13:48:05 PAGE 6   

 304          入口参数：y(为字符常量)
 305          ***************************************************/
 306          void WriteData(unsigned char y)
 307          {
 308   1        while(BusyTest()==1);  
 309   1        RS=1;           //RS为高电平，RW为低电平时，可以写入数据
 310   1        RW=0;
 311   1        E=0;            //E置低电平(根据表8-6，写指令时，E为高脉冲，
 312   1                           // 就是让E从0到1发生正跳变，所以应先置"0"
 313   1        P0=y;           //将数据送入P0口，即将数据写入液晶模块
 314   1        _nop_();
 315   1        _nop_();
 316   1        _nop_();
 317   1        _nop_();       //空操作四个机器周期，给硬件反应时间
 318   1        E=1;           //E置高电平
 319   1        _nop_();
 320   1        _nop_();
 321   1        _nop_();
 322   1        _nop_();        //空操作四个机器周期，给硬件反应时间
 323   1        E=0;            //当E由高电平跳变成低电平时，液晶模块开始执行命令
 324   1      }
 325          /*****************************************************
 326          函数功能：对LCD的显示模式进行初始化设置
 327          ***************************************************/
 328          void LcdInitiate(void)
 329          {
 330   1          Delay_xMs(15);               //延时15ms，首次写指令时应给LCD一段较长的反应时间
 331   1          WriteInstruction(0x38);     //显示模式设置：16×2显示，5×7点阵，8位数据接口
 332   1          Delay_xMs(5);                //延时5ms　，给硬件一点反应时间
 333   1          WriteInstruction(0x38);
 334   1          Delay_xMs(5);               //延时5ms　，给硬件一点反应时间
 335   1          WriteInstruction(0x38);     //连续三次，确保初始化成功
 336   1          Delay_xMs(5);               //延时5ms　，给硬件一点反应时间
 337   1          WriteInstruction(0x0c);     //显示模式设置：显示开，无光标，光标不闪烁
 338   1          Delay_xMs(5);               //延时5ms　，给硬件一点反应时间
 339   1          WriteInstruction(0x06);     //显示模式设置：光标右移，字符不移
 340   1          Delay_xMs(5);                //延时5ms　，给硬件一点反应时间
 341   1          WriteInstruction(0x01);     //清屏幕指令，将以前的显示内容清除
 342   1          Delay_xMs(5);             //延时5ms　，给硬件一点反应时间
 343   1       } 
 344          /************************************************************************
 345          以下是DS18B20的操作程序
 346           ************************************************************************/ 
 347          sbit DQ=P2^2;
 348          unsigned char time;   //设置全局变量，专门用于严格延时
 349          /*****************************************************
 350          函数功能：将DS18B20传感器初始化，读取应答信号
 351          出口参数：flag 
 352          ***************************************************/
 353          bit Init_DS18B20(void)  
 354          {
 355   1       bit flag;         //储存DS18B20是否存在的标志，flag=0，表示存在；flag=1，表示不存在
 356   1       DQ = 1;           //先将数据线拉高
 357   1       for(time=0;time<2;time++) //略微延时约6微秒
 358   1           ;
 359   1       DQ = 0;           //再将数据线从高拉低，要求保持480~960us
 360   1       for(time=0;time<200;time++)  //略微延时约600微秒
 361   1           ;         //以向DS18B20发出一持续480~960us的低电平复位脉冲 
 362   1       DQ = 1;           //释放数据线（将数据线拉高） 
 363   1       for(time=0;time<10;time++)
 364   1           ;  //延时约30us（释放总线后需等待15~60us让DS18B20输出存在脉冲）
 365   1       flag=DQ;          //让单片机检测是否输出了存在脉冲（DQ=0表示存在）      
C51 COMPILER V9.54   ULTRASONIC                                                            07/11/2017 13:48:05 PAGE 7   

 366   1       for(time=0;time<200;time++)  //延时足够长时间，等待存在脉冲输出完毕
 367   1            ;
 368   1       return (flag);    //返回检测成功标志
 369   1      }
 370          /*****************************************************
 371          函数功能：从DS18B20读取一个字节数据
 372          出口参数：dat
 373          ***************************************************/ 
 374          unsigned char ReadOneChar(void)
 375          {
 376   1        unsigned char i=0;  
 377   1        unsigned char dat;  //储存读出的一个字节数据
 378   1        for (i=0;i<8;i++)
 379   1        {
 380   2          DQ =1;       // 先将数据线拉高
 381   2          _nop_();      //等待一个机器周期   
 382   2          DQ = 0;      //单片机从DS18B20读书据时,将数据线从高拉低即启动读时序
 383   2          dat>>=1;
 384   2          _nop_();     //等待一个机器周期      
 385   2          DQ = 1;     //将数据线"人为"拉高,为单片机检测DS18B20的输出电平作准备
 386   2          for(time=0;time<2;time++)
 387   2                   ;      //延时约6us，使主机在15us内采样
 388   2          if(DQ==1)
 389   2            dat|=0x80;  //如果读到的数据是1，则将1存入dat
 390   2          else
 391   2            dat|=0x00;//如果读到的数据是0，则将0存入dat
 392   2               //将单片机检测到的电平信号DQ存入r[i] 
 393   2          for(time=0;time<8;time++)
 394   2                  ;              //延时3us,两个读时序之间必须有大于1us的恢复期  
 395   2         }                      
 396   1         return (dat);    //返回读出的十进制数据
 397   1      }
 398          /*****************************************************
 399          函数功能：向DS18B20写入一个字节数据
 400          入口参数：dat
 401          ***************************************************/  
 402          WriteOneChar(unsigned char dat)
 403          {
 404   1        unsigned char i=0;
 405   1        for (i=0; i<8; i++)
 406   1        {
 407   2          DQ =1;         // 先将数据线拉高
 408   2          _nop_();       //等待一个机器周期  
 409   2          DQ=0;          //将数据线从高拉低时即启动写时序       
 410   2          DQ=dat&0x01;   //利用与运算取出要写的某位二进制数据,
 411   2                             //并将其送到数据线上等待DS18B20采样  
 412   2          for(time=0;time<10;time++)  
 413   2               ;//延时约30us，DS18B20在拉低后的约15~60us期间从数据线上采样
 414   2          DQ=1;          //释放数据线       
 415   2          for(time=0;time<1;time++)
 416   2              ;//延时3us,两个写时序间至少需要1us的恢复期
 417   2          dat>>=1;       //将dat中的各二进制位数据右移1位
 418   2        }
 419   1        for(time=0;time<4;time++)
 420   1                      ; //稍作延时,给硬件一点反应时间
 421   1      }
 422          /******************************************************************************
 423          以下是与温度有关的显示设置
 424           ******************************************************************************/
 425           /*****************************************************
 426          函数功能：显示没有检测到DS18B20
 427          ***************************************************/   
C51 COMPILER V9.54   ULTRASONIC                                                            07/11/2017 13:48:05 PAGE 8   

 428          void display_error(void)
 429          {
 430   1        unsigned char i;
 431   1        WriteAddress(0x00);    //写显示地址，将在第1行第1列开始显示
 432   1        i = 0;                //从第一个字符开始显示
 433   1        while(Error[i] != '\0')  //只要没有写到结束标志，就继续写
 434   1          {
 435   2            WriteData(Error[i]);   //将字符常量写入LCD
 436   2            i++;                 //指向下一个字符
 437   2            Delay_xMs(100);//延时100ms较长时间，以看清关于显示的说明
 438   2          } 
 439   1        while(1)              //进入死循环，等待查明原因
 440   1                ;
 441   1      } 
 442          /*****************************************************
 443          函数功能：显示温度的整数部分
 444          入口参数：x
 445          ***************************************************/ 
 446          void display_temp1(unsigned char x)
 447          {
 448   1        unsigned char j,k,l;     //j,k,l分别储存温度的百位、十位和个位
 449   1        j=x/100;              //取百位
 450   1        k=(x%100)/10;    //取十位
 451   1        l=x%10;             //取个位  
 452   1        WriteAddress(0x02);    //写显示地址,将在第2行第7列开始显示
 453   1        WriteData(digit[j]);    //将百位数字的字符常量写入LCD
 454   1        WriteData(digit[k]);    //将十位数字的字符常量写入LCD
 455   1        WriteData(digit[l]);    //将个位数字的字符常量写入LCD
 456   1        Delay_xMs(50);         //延时1ms给硬件一点反应时间     
 457   1       }
 458           /*****************************************************
 459          函数功能：显示温度的小数数部分
 460          入口参数：x
 461          ***************************************************/ 
 462           void display_temp2(unsigned char x)
 463          {
 464   1        WriteAddress(0x06);      //写显示地址,将在第2行第11列开始显示
 465   1        WriteData(digit[x]);     //将小数部分的第一位数字字符常量写入LCD
 466   1        Delay_xMs(50);          //延时1ms给硬件一点反应时间
 467   1      }
 468          /*****************************************************
 469          函数功能：做好读温度的准备
 470          ***************************************************/ 
 471          void ReadyReadTemp(void)
 472          {
 473   1        Init_DS18B20();     //将DS18B20初始化
 474   1        WriteOneChar(0xCC); // 跳过读序号列号的操作
 475   1        WriteOneChar(0x44); // 启动温度转换   
 476   1        for(time=0;time<100;time++);   //温度转换需要一点时间
 477   1        Init_DS18B20();     //将DS18B20初始化
 478   1        WriteOneChar(0xCC); //跳过读序号列号的操作
 479   1        WriteOneChar(0xBE); //读取温度寄存器,前两个分别是温度的低位和高位 
 480   1      }
 481          
 482          /******************************************************************************/
 483          /* 函数名称  : main                                                           */
 484          /* 函数描述  : 主函数                                                         */
 485          /* 输入参数  : 无                                                             */
 486          /* 参数描述  : 无                                                             */
 487          /* 返回值    : 无                                                             */
 488          /******************************************************************************/          
 489          void main(void)
C51 COMPILER V9.54   ULTRASONIC                                                            07/11/2017 13:48:05 PAGE 9   

 490          {
 491   1        unsigned char TL;     //储存暂存器的温度低位
 492   1        unsigned char TH;    //储存暂存器的温度高位
 493   1        unsigned char TN;      //储存温度的整数部分
 494   1        unsigned char TD;       //储存温度的小数部分
 495   1        int fflag;
 496   1        fdebug=0;
 497   1        VELOCITY=3453;       //23摄氏度时的声速，声速V= 331.5 + 0.6*温度；
 498   1        RW = 0;
 499   1        initLCD();
 500   1        Init_MCU();
 501   1        Init_Parameter();
 502   1        //Alarm(2);
 503   1        display_char(table,0x00);
 504   1        display_char(table0,0x40);
 505   1        Delay_xMs(30000);
 506   1        display_char(table0,0x00);
 507   1        display_char(table1,0x40);
 508   1        if(Init_DS18B20()==1)
 509   1          display_error();
 510   1        display_char(Temp,0x00);
 511   1        display_char(".",0x05);
 512   1        display_char(V,0x08);
 513   1        while(1)
 514   1        {
 515   2          fflag=0;
 516   2          Init_Parameter();
 517   2          TR0 = 1;
 518   2          OUTPUT = 1;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 519   2          OUTPUT = 0;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 520   2          OUTPUT = 1;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 521   2          OUTPUT = 0;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 522   2          OUTPUT = 1;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 523   2          OUTPUT = 0;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 524   2          OUTPUT = 1;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 525   2          OUTPUT = 0;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 526   2          OUTPUT = 1;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 527   2          OUTPUT = 0;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 528   2          OUTPUT = 1;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 529   2          OUTPUT = 0;_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();   
 530   2          //Trig_SuperSonic();         //触发超声波发射
 531   2      //    TR0 = 1; 
 532   2      //Delay_xMs(1);
 533   2          //TR0 = 1; 
 534   2           while(INPUT==0)          //等待回声
 535   2               {
 536   3      //             if (count==17)
 537   3      //               break;
 538   3               }
 539   2      //         Alarm(2);
 540   2           fflag=Measure_Distance();        //计算脉宽并转换为距离
 541   2           ReadyReadTemp();     //读温度准备
 542   2           TL=ReadOneChar();    //先读的是温度值低位
 543   2           TH=ReadOneChar();    //接着读的是温度值高位
 544   2           TN=TH*16+TL/16;      //实际温度值=(TH*256+TL)/16,即：TH*16+TL/16
 545   2                              //这样得出的是温度的整数部分,小数部分被丢弃了
 546   2           VELOCITY=3315+6*TN;// 331.5 + 0.6*温度；
 547   2           TD=(TL%16)*10/16;    //计算温度的小数部分,将余数乘以10再除以16取整，
 548   2                              //这样得到的是温度小数部分的第一位数字(保留1位小数)
 549   2           display_temp1(TN);    //显示温度的整数部分
 550   2           display_temp2(TD);    //显示温度的小数部分
 551   2           display_char(table3,0x40);
C51 COMPILER V9.54   ULTRASONIC                                                            07/11/2017 13:48:05 PAGE 10  

 552   2           if(fflag){
 553   3           display(distance,0x49);    //显示距离
 554   3           }
 555   2           displayv(VELOCITY,0x0a);
 556   2           Init_Parameter();          // 参数重新初始化
 557   2           delayt(1000);               //延时，两次发射之间要至少有10ms间隔
 558   2         }  
 559   1      }
 560          /******************************************************************************/
 561          /* 函数名称  : timer0                                                         */
 562          /* 函数描述  : T0中断处理函数                                                 */
 563          /* 输入参数  : 无                                                             */
 564          /* 参数描述  : 无                                                             */
 565          /* 返回值    : 无                                                              */
 566          /******************************************************************************/
 567          void timer0 (void) interrupt 1
 568          {
 569   1        TF0 = 0;
 570   1        TL0 = 0x66;
 571   1        TH0 = 0xfc;
 572   1        count++;
 573   1        if(count == 18)//超声波回声脉宽最多18ms
 574   1        {
 575   2          TR0 =0;
 576   2          TL0 = 0x66; 
 577   2          TH0 = 0xfc;
 578   2          count = 0;
 579   2        }
 580   1      }
 581          /******************************************************************************/
*** WARNING C290 IN LINE 421 OF UltraSonic.c: missing return value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1625    ----
   CONSTANT SIZE    =     47    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     73      15
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
